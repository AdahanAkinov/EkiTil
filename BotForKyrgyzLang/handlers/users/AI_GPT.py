from loader import dp
from aiogram import types

#import openai
from data.config import AI_GPT_TOKEN

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from filters.private_chat import IsPrivate
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from keyboards.default.keyboard_menu import kb_menu_for_all

#openai.api_key = AI_GPT_TOKEN

# class Message_for_AI(StatesGroup):
#     message = State()


# cancel_kb = ReplyKeyboardMarkup(
#     keyboard=[
#         [
#             KeyboardButton(text='üö´–û—Ç–º–µ–Ω–∞')
#         ]
#     ],
#     resize_keyboard=True
# )

# again_kb = ReplyKeyboardMarkup(
#     keyboard=[
#         [
#             KeyboardButton(text='/AI_TSI')
#         ]
#     ],
#     resize_keyboard=True
# )


# @dp.message_handler(IsPrivate(), commands=['AI_TSI'])
# async def process_wait(message: types.Message):
#     await message.answer('‚ùî–£ –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò‚ùî\n\nüí¨–í–≤–µ–¥–∏—Ç–µ:', reply_markup=cancel_kb)
#     await Message_for_AI.message.set()

# def update(messages, role, content):
#     messages.append({'role': role, 'content': content})
#     return messages

# @dp.message_handler(IsPrivate(), state=Message_for_AI.message)
# async def process_request_message(message: types.Message, state: FSMContext):
#     await state.update_data(message=message.text)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ state
#     data = await state.get_data() 
#     prompt = data.get('message')  # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     if prompt == 'üö´–û—Ç–º–µ–Ω–∞':
#         await state.finish()
#         await message.answer('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω üö´', reply_markup=kb_menu_for_all)
#         await message.delete()
#     else:
#         response = openai.ChatCompletion.create(
#             model="gpt-3.5-turbo",
#             messages=[
#                 {"role": "system", "content": "You are a helpful assistant."},
#                 {"role": "user", "content": "–ú–µ–Ω—è –∑–æ–≤—É—Ç Eagl_AI. –Ø –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ–±–µ"},
#                 {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Eagl_AI. –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ò–ò –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"},
#                 {"role": "user", "content": "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å?"},
#                 {"role": "assistant", "content": "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∫–∏, –ø–∏—Å–∞—Ç—å –∫–æ–¥, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ —É—á–µ–±–µ –≤ —Ü–µ–ª–æ–º."},
#                 {"role": "user", "content": prompt}
#             ]
#         )
#         await message.reply(response['choices'][0]['message']['content'], reply_markup=again_kb)
#         await state.finish() 

# #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
# @dp.message_handler(IsPrivate(), Text('üö´–û—Ç–º–µ–Ω–∞'))
# async def cancel_AI_process(message: types.Message):
#     await message.answer('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω üö´')
#     await message.delete()
